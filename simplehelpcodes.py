from __future__ import  division
import csv
import numpy as np
np.set_printoptions(threshold=np.inf)
from numpy import mean
from numpy import std
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from numpy import genfromtxt
from scipy.stats import wilcoxon
from scipy.stats import mannwhitneyu
from io import StringIO
import seaborn as sns
import codecs
import numpy as np



#Average of a list
def average(lst):
    return sum(lst) / len(lst)

#Converting a .csv to a .txt
def csvtotxt():
    with open('nameofscv', 'r') as file:
        data = file.read().split('\n')
    rownumber = 0
    for row in data:
        with open('nameofcsvtotab' + str(rownumber) + '.txt', 'w') as output:
            output.write(str(row))
            rownumber = rownumber + 1

#Barplots
def forbarplt():
    df = pd.read_csv('nameofcsv.csv')
    df = df.set_index('engines')
    fig, ax = plt.subplots()
    df.plot(kind='barh', ax=ax)
    ax.grid(color='gray', linestyle='-', alpha=0.3)
    ax.legend().set_visible(False)
    plt.xlabel('xlabel goes here')
    plt.ylabel('ylabel goes here')
    fig_size = plt.rcParams["figure.figsize"]
    fig_size[0] = 11
    fig_size[1] = 5
    plt.rcParams["figure.figsize"] = fig_size

#Plot from csv
def plotabeg():
    result_csv = StringIO(u"""
  Gen,RUN1,RUN2,RUN3,RUN4,RUN5
1,0.614348704,0.650060026,0.653633142,0.637657201,0.600401949
2,0.614348704,0.650060026,0.637916786,0.637657201,0.600401949
3,0.614348704,0.650060026,0.609448565,0.637657201,0.600401949
4,0.614348704,0.650060026,0.609448565,0.637657201,0.600401949
5,0.614348704,0.62341634,0.609448565,0.637657201,0.600401949
6,0.614348704,0.551444768,0.609448565,0.636898345,0.600401949
7,0.614348704,0.551444768,0.609448565,0.636898345,0.600401949
8,0.614348704,0.551444768,0.609448565,0.58705752,0.600401949
9,0.614348704,0.551444768,0.609448565,0.58705752,0.600222744
10,0.614348704,0.551444768,0.609448565,0.58705752,0.596426367
11,0.614348704,0.551444768,0.609448565,0.58705752,0.596426367
12,0.614348704,0.551444768,0.609448565,0.58705752,0.596426367
13,0.614348704,0.551444768,0.609448565,0.58705752,0.596426367
14,0.614348704,0.551444768,0.608078912,0.58705752,0.596426367
15,0.614348704,0.551444768,0.608078912,0.58705752,0.596426367
16,0.614348704,0.551444768,0.587793679,0.58705752,0.596426367
17,0.614348704,0.551444768,0.587793679,0.58705752,0.596426367
18,0.608925326,0.551444768,0.584495602,0.58705752,0.596426367
19,0.608925326,0.551444768,0.584495602,0.58705752,0.596426367
20,0.608925326,0.551444768,0.584495602,0.58705752,0.596426367
21,0.608925326,0.551444768,0.578905288,0.58705752,0.596426367
22,0.608925326,0.551444768,0.578905288,0.58705752,0.596426367
23,0.608925326,0.551444768,0.578905288,0.58705752,0.596426367
24,0.608925326,0.551444768,0.578905288,0.58705752,0.596426367
25,0.608925326,0.551444768,0.578905288,0.58705752,0.596426367
26,0.570403368,0.551444768,0.578905288,0.58705752,0.596426367
27,0.570403368,0.551444768,0.578905288,0.58705752,0.596426367
28,0.570403368,0.551444768,0.578905288,0.58705752,0.596426367
29,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
30,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
31,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
32,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
33,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
34,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
35,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
36,0.570403368,0.551444768,0.57477322,0.58705752,0.596426367
37,0.542908931,0.551444768,0.57477322,0.58705752,0.582963194
38,0.542908931,0.551444768,0.57477322,0.58705752,0.582963194
39,0.542908931,0.551444768,0.57477322,0.58705752,0.582963194
40,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
41,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
42,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
43,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
44,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
45,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
46,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
47,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
48,0.542908931,0.551444768,0.57477322,0.58705752,0.573129541
49,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
50,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
51,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
52,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
53,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
54,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
55,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
56,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
57,0.540307799,0.551444768,0.57477322,0.58705752,0.573129541
58,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
59,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
60,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
61,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
62,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
63,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
64,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
65,0.540307799,0.551444768,0.573290338,0.58705752,0.573129541
66,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
67,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
68,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
69,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
70,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
71,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
72,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
73,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
74,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
75,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
76,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
77,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
78,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
79,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
80,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
81,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
82,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
83,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
84,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
85,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
86,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
87,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
88,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
89,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
90,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
91,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
92,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
93,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
94,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
95,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
96,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
97,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
98,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
99,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
100,0.527870158,0.551444768,0.573290338,0.58705752,0.573129541
    """)
    per_data = genfromtxt(result_csv, delimiter=',',names=True)
    for name in per_data.dtype.names[1:]:
        # Set the line's label to the column name
        plt.plot(per_data['Gen'], per_data[name], label=name)

    # Add a legend
    plt.legend(loc=0)
    plt.ylabel('FITNESS')
    plt.xlabel('ITERATION')
    plt.title('FITx)')
    plt.show()

#Working with dictionaries
def testdict():
    seedict = {"write": '1', "futex": '2', "restart_syscall": '3', "accept4": '4', "clock_gettime": '5', "recvmsg": '6',
               "rt_sigtiimedwait": '7',
               "recvfrom": '8', "writev": '9', "stat64": '10', "openat": '11', "poll": '12', "gettimeofday": '13', "read": '14',
               "_exit:exit_group": '15',
               "_exit_thread:exit": '16', "__fork:fork": '17', "_waitpid:waitpid": '18', "__waitid:waitid": '19',
               "__sys_clone:clone": '20',
               "execve": '21', "__setuid:setuid32": '22', "__setuid:setuid": '23', "getuid:getuid32": '24', "getuid:getuid": '25',
               "getgid:getgid32": '26', "getgid:getgid": '27', "geteuid:geteuid32": '28', "geteuid:geteuid": '29',
               "getegid:getegid32": '30',
               "getegid:getegid": 31, "getresuid:getresuid32": 32, "getresuid:getresuid": 33,
               "getresgid:getresgid32": 34,
               "getresgid:getresgid": 35, "gettid": 36, "readahead": 37, "getgroups:getgroups32": 38,
               "getgroups:getgroups": 39,
               "getpgid": 40, "getppid": 41, "getsid": 42, "setsid": 43, "setgid:setgid32": 44, "setgid:setgid": 45,
               "seteuid:seteuid32": 46, "__setreuid:setreuid32": 47, "__setreuid:setreuid": 48,
               "__setresuid:setresuid32": 49,
               "__setresuid:setresuid": 50, "setresgid:setresgid32": 51, "setresgid:setresgid": 52, "__brk:brk": 53,
               "kill": 54,
               "tkill": 55, "tgkill": 56, "__ptrace:ptrace": 57, "__set_thread_area:set_thread_area": 58,
               "__getpriority:getpriority": 59,
               "setpriority": '60', "setrlimit": '61', "getrlimit:ugetrlimit": '62', "getrlimit:getrlimit": '63',
               "getrusage": '64', "setgroups:setgroups32": '65',
               "setgroups:setgroups": '66', "getpgrp": '67', "setpgid": '68', "vfork": '69', "setregid:setregid32": '70',
               "setregid:setregid": '71',
               "chroot": '72', "prctl": '73', "capget": '74', "capset": '75', "sigaltstack": '76', "acct": '77', "pread64": '78',
               "pwrite64": '79',
               "__open:open": '80', "__openat:openat": '81', "close": '82', "creat": '83', "lseek": '84', "__llseek:_llseek": '85',
               "getpid": '86',
               "mmap2": '87', "__mmap2:mmap2": '88', "munmap": '89', "mremap": '90', "msync": '91', "mprotect": '92', "madvise": '93',
               "mlock": '94',
               "munlock": '95', "mlockall": '96', "munlockall": '97', "mincore": '98', "__ioctl:ioctl": '99', "readv": '100',
               "__fcntl:fcntl": '101',
               "flock": '102', "fchmod": '103', "dup": '104', "pipe": '105', "pipe2": '106', "dup2": '107',
               "select:_newselect": '108', "ftruncate": '109',
               "ftruncate64": '110', "getdents:getdents64": '111', "fsync": '112', "fdatasync": '113', "fchown:fchown32": '114',
               "fchown:fchown": '115',
               "sync": '116', "__fcntl64:fcntl64": '117', "__fstatfs64:fstatfs64": '118', "sendfile": '119',
               "fstatat:fstatat64": '120',
               "mkdirat": '121', "fchownat": '122', "fchmodat": '123', "renameat": '124', "fsetxattr": '125', "fgetxattr": '126',
               "flistxattr": '127',
               "fremovexattr": '128', "link": '129', "unlink": '130', "unlinkat": '131', "chdir": '132', "mknod": '133',
               "chmod": '134', "chown:chown32": '135',
               "chown:chown": '136', "lchown:lchown32": '137', "lchown:lchown": '138', "mount": '139', "umount": '140',
               "umount2": '141',
               "fstat:fstat64": '142', "stat:stat64": '143', "lstat:lstat64": '144', "mkdir": '145', "readlinkat": '146',
               "rmdir": '147',
               "rename": '148', "__getcwd:getcwd": '149', "access": '150', "faccessat": '151', "symlink": '152', "fchdir": '153',
               "truncate": '154',
               "setxattr": '155', "lsetxattr": '156', "getxattr": '157', "lgetxattr": '158', "listxattr": '159',
               "llistxattr": '160',
               "removexattr": '161', "lremovexattr": '162', "__statfs64:statfs64": '163', "unshare": '164', "pause": '165',
               "settimeofday": '166', "times": '167', "nanosleep": '168', "clock_settime": '169', "clock_getres": '170',
               "clock_nanosleep": '171',
               "getitimer": '172', "setitimer": '173', "__timer_create:timer_create": '174',
               "__timer_settime:timer_settime": '175',
               "__timer_gettime:timer_gettime": '176', "__timer_getoverrun:timer_getoverrun": '177',
               "__timer_delete:timer_delete": '178',
               "utimes": '179', "utimensat": '180', "sigaction": '181', "sigprocmask": '182', "__sigsuspend:sigsuspend": '183',
               "__rt_sigaction:rt_sigaction": '185', "__rt_sigprocmask:rt_sigprocmask": '186',
               "__rt_sigtimedwait:rt_sigtimedwait": '187', "sigpending": '188',
               "socket": '189', "socketpair": '190', "bind": '191', "connect": '192', "listen": '193', "accept": '194',
               "getsockname": '195',
               "getpeername": '196', "sendto": '197', "shutdown": '198', "setsockopt": '199', "getsockopt": '200', "sendmsg": '201',
               "socket:socketcall:1": '202',
               "bind:socketcall:2": '203', "connect:socketcall:3": '204', "listen:socketcall:4": '205',
               "accept:socketcall:5": '206',
               "getsockname:socketcall:6": '207', "getpeername:socketcall:7": '208', "socketpair:socketcall:8": '209',
               "sendto:socketcall:11": '210',
               "recvfrom:socketcall:12": '211', "shutdown:socketcall:13": '212', "setsockopt:socketcall:14": '213',
               "getsockopt:socketcall:15": '214',
               "sendmsg:socketcall:16": '215', "recvmsg:socketcall:17": '216', "sched_setscheduler": '217',
               "sched_getscheduler": '218',
               "sched_yield": '219', "sched_setparam": '220', "sched_getparam": '221', "sched_get_priority_max": '222',
               "sched_get_priority_min": '223',
               "sched_rr_get_interval": '224', "sched_setaffinity": '225', "__sched_getaffinity:sched_getaffinity": '226',
               "__getcpu:getcpu": '227',
               "ioprio_set": '228', "ioprio_get": '229', "uname": '230', "__wait4:wait4": '231', "umask": '232',
               "__reboot:reboot": '233',
               "__syslog:syslog": '234', "init_module": '235', "delete_module": '236', "klogctl:syslog": '237', "sysinfo": '238',
               "personality": '239',
               "perf_event_open": '240', "epoll_create": '241', "epoll_ctl": '242', "epoll_wait": '243', "inotify_init": '244',
               "inotify_add_watch": '245',
               "inotify_rm_watch": '246', "eventfd:eventfd2": '247', "__set_tls:ARM_set_tls": '248',
               "cacheflush:ARM_cacheflush": '249',
               "_flush_cache:cacheflush": '250', "syscall": '251', "ioctl": '252', "epoll_pwait": '253', "getuid32": '254',
               "rt_sigprocmask": '255',
               "getpriority": '256', "fcntl64": '257', "fstatat64": '258', "clone": '259', "_llseek": '260',
               "rt_sigtimedwait": '261', "modify_ldt": '262', "fstat64": '263', "pselect6": '264', "set_tid_address": '265',
               "_exit": '266',
               "geteuid32": '267', "getdents64": '268', "ppoll": '269', "exit_group": '270', "wait4": '271', "0": '0'
               }
    mainlist = []

    file = csv.reader(open('nameofcsv', 'rb'), delimiter=',')
    print (seedict.values())
    for line in file:
        line = [entry.decode("utf-8-sig").encode("utf-8") for entry in line]
        print(line)
        add = []
        for i in line:
            add.append(seedict.keys()[seedict.values().index(i)])
        print (add)
        mainlist.append(add)
    print (mainlist)
    with open('nameofcsv', 'w') as csvFile:
        writer = csv.writer(csvFile)
        writer.writerows(mainlist)
    csvFile.close()

#Statistical tests
def testdata():
    with open('namesofcsv', 'rb') as infile:
        data = csv.reader(codecs.EncodedFile(infile, 'utf8', 'utf_8_sig'), delimiter=",", quotechar='|',)
        column1, column2 = [], []
        for row in data:
            column1.append(row[0])
            column2.append(row[1])

        print (column1)
        print (column2)
        data1 = np.array(column1).astype(np.float)
        data2 = np.array(column2).astype(np.float)
        print('data1: mean=%.3f stdv=%.3f' % (mean(data1), std(data1)))
        print('data2: mean=%.3f stdv=%.3f' % (mean(data2), std(data2)))
        stat, p = wilcoxon(data1, data2)
        print('Wilcoxon signed-rank test')
        print('Statistics=%.3f, p=%.3f' % (stat, p))
        # interpret
        alpha = 0.05
        if p > alpha:
            print('Same distributions (fail to reject H0)')
        else:
            print('Different distributions (reject H0)')
        print('Mann-Whitney U test')
        stat2, p2 = mannwhitneyu(data1, data2)
        print('Statistics=%.3f, p=%.3f' % (stat2, p2))
        # interpret
        alpha = 0.05
        if p2 > alpha:
            print('Same distributions (fail to reject H0)')
        else:
            print('Different distributions (reject H0)')

#Colored boxplot
def coloredboxplot():
    df = pd.read_csv("nameofcsv")
    plt.figure(figsize=(3, 4))
    ax=sns.boxplot(data=df)
    ax.set_title('title goes here')

#For Boxplots
def boxplot():
    df = pd.read_csv("nameofcsv")
    print (df)
    ax = df.boxplot()
    ax.grid(False)
    sub_df = df.V1
    pd.DataFrame(sub_df).boxplot()
    plt.scatter(np.repeat(1, df.shape[0]), sub_df.ravel(), marker='+', alpha=0.5)

#For scatterplots
def forscatter():
    x = [0.646050305, 0.99469498, 0.446082315, 0.4524106058,0.858821901, 0.65724048]
    y = [0.772984571, 0.980678952, 0.770899512, 0.764686932, 0.661883863, 0.6675708494]
    z = [0.972787009, 0.831794758, 0.94893081, 0.807814641, 0.694627312, 0.719431582]
    label = [0, 1, 2, 3, 0, 1, 2, 3]
    colors = ['red', 'green', 'blue', 'purple']
    fig = plt.figure(figsize=(8, 8))
    plt.scatter(x, y, c=label, cmap=matplotlib.colors.ListedColormap(colors))
    cb = plt.colorbar()
    loc = np.arange(0, max(label), max(label) / float(len(colors)))
    cb.set_ticks(loc)
    cb.set_ticklabels(colors)

#Convert array to csv
def convertarraytocsv():
    myarray = [['0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.614348704254', '0.608925326372', '0.608925326372', '0.608925326372', '0.608925326372', '0.608925326372', '0.608925326372', '0.608925326372', '0.608925326372', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.570403367919', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.542908931279', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.540307798832', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495', '0.527870158495'], ['0.65006002557', '0.65006002557', '0.65006002557', '0.65006002557', '0.623416339649', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085', '0.551444768085'], ['0.653633142149', '0.637916786295', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.609448564571', '0.608078911556', '0.608078911556', '0.587793678516', '0.587793678516', '0.584495602041', '0.584495602041', '0.584495602041', '0.578905288071', '0.578905288071', '0.578905288071', '0.578905288071', '0.578905288071', '0.578905288071', '0.578905288071', '0.578905288071', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.574773220182', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.5732903382954474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474', '0.573290338474'], ['0.637657201128', '0.637657201128', '0.637657201128', '0.637657201128', '0.637657201128', '0.63689834525', '0.63689834525', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053', '0.587057520053'], ['0.60040194935', '0.60040194935', '0.60040194935', '0.60040194935', '0.60040194935', '0.60040194935', '0.60040194935', '0.60040194935', '0.600222744486', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.596426367142', '0.582963194312', '0.582963194312', '0.582963194312', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015', '0.573129541015']]
    with open('new.csv', 'w') as csvFile:
        writer = csv.writer(csvFile)
        writer.writerows(myarray)
    csvFile.close()

